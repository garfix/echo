2013-12-15

I discern two types of copular sentences:

type 1: The ball is round. (Predicative adjective as subject complement)

subject(?e, ?s)
isa(?s, Ball)
modifier(?e, ?m)
isa(?m, Round)

The syntactic adjective phrase is turned into a `modifier` predicate.

type 2: The tree is a larch. (Predicative nominal as subject complement)

subject(?e, ?s)
isa(?s, Tree)
complement(?e, ?c)
isa(?c, Larch)

The syntactic noun phrase is turned into a `complement` predicate.

You might think that a predicate like `type` could be more convenient, but the structure is also used in sentences like this:

The man is no longer the `highest` in rank.
He is the heir to the throne.

For more information, see http://en.wikipedia.org/wiki/Complement_%28linguistics%29

2013-12-14

I added generation of conjunctions.

Conjunctions are represented as binary trees that grow on the right side.

    ?n1
   /   \
  ?e1  ?n2
      /   \
     ?e2  ?n3
         /   \
        ?e3   ?e4

It is built from relations like this

link(And, ?n1, ?e1, ?n2)

I tried several other representations, but this one proved relatively cheap in number of relations, and it proved easy to generate sentences from.
Also note that the conjunction is not just represented by a relation; it is an entity as well. I.e. it is reified. And that means it may be modified.

2013-11-23

I added sentence adverbs to the generation grammar. I chose this form:

 qualification(?event, ?qualification)
 isa(?qualification, ?type)

For example, to prepend "Fortunately, ..." to a sentence, add these relations:

 qualification(?event, ?qualification)
 isa(?qualification, Fortunate)

The main rule that than applies is

 S => adverb punctuationMark SDecl

Note: to generate a sentence, the relation

 sentence(?event)

still needs to be added. And not 'sentence(?qualification)' as you might expect, since the ?qualification is a meta-proposition, and in that sense "above" the main sentence.
This may change in the future. At that time, qualification(?event, ?qualification) may change into about(?qualification, ?event) and the "direction" of the relation changes.
But for now it is easier to keep ?event as the focus of the sentence. It all depends on the use cases I may encounter.

2013-08-26

I decided to download only "persons" and to do this in batches of two initial letters at a time, to circumvent the result limitation of 50.000.
I used CSV to download.

Here's the query for the names starting with 'C' and 'D':

SELECT DISTINCT ?name WHERE { { { ?person rdfs:label ?name } UNION { ?person dbpprop:birthName ?name } } .  ?person rdf:type dbpedia-owl:Person . FILTER(lang(?name) = 'en') . FILTER regex(?name, '^[cd]', 'i') } ORDER BY ?name

It results in a 5.4 MB file, but fortunately a regular expression finds all occurrences of a partial name in a fraction of a second.

2013-08-25

In autosuggesting the names of the persons listed in DBPedia, I stumbled against the slowness of the Virtuoso engine.
Regex queries on names are impossibly slow. In order to have autosuggest anyway, I decided to download the names of
  the persons from the DBPedia download section:

  http://downloads.dbpedia.org/3.8/en/

  http://downloads.dbpedia.org/3.8/en/labels_en.ttl.bz2

It's still 1.2 GB large and I will need to do a real-time query on it. I will parse the names from the the triples file,
 and see if a simple preg_match will do. If not, I will import them in a database.
