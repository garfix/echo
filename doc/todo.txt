Ooit:

 * sentenceType => mood (later een keer; ben er nog niet uit wat ik hiermee doe)
 * 1st person (in artikel voorbeeld => 3rd person)
 * De zinseinde-detectie is te beperkt (zoeken naar een punt)
 * default feature values (bv. voice=active) bij het uitvoeren van DAG unification
 * Welke mogen weg? features / head / syntax?
 * Haal zo veel mogelijk de rare constructies weg uit het lexicon!
 * Sentence: verplaats voice naar clause
 * Maak een aparte taal voor syntax unification constraints

Volgende zinnen:
* Maak een zin waarin een bijvoeglijk naamwoord voorkomt.
* Maak een zin waarin een bijwoord voorkomt.
* Maak een zin waarin een een determiner relevant is (Bv. geef me alle inwoners van London ouder dan 80 jaar)

Nu:
* testMapperSimple::testMapperSimple wordt niet goed uitgevoerd
* Maak een speciale vorm van een predication: let(var, expression)
	waar expression = term / functie (var + var / function, etc)
	een andere vorm is misschien beter, want het is raar om een uitzondering te maken voor een bepaalde soort predicatie
	en het zou goed zijn om aan te geven dat de functies worden uitgevoerd _na_ de predicaties
	met tests
* scheidt de predicaties van de relaties (indien nodig)
* voer de functies uit nadat de resultaten van de database binnen zijn

manner(?e, ?q) :- isa(?e, Old) and subject(?e, ?s) and born(?s, ?b) and time(?e, ?t) and diff_years(?b, ?t, ?q)

manner(?e, ?q) :- isa(?e, Old) and subject(?e, ?s) and born(?s, ?b) and time(?e, ?t), ?q = floor(?b - ?t)

predication :- predication (and predication)* (, assignment (, assignment)*)

