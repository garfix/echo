[
	// passive declarative sentence with a preposition
	// (yes, ) Lord Byron was born in London

	rule:
		S => premodifier NP1 auxPsv VP preposition NP2,
	condition:
		[ S: [ head: [ sentenceType: 'declarative', voice: 'passive', clause: [ preposition: match, deepDirectObject: match ] ] ] ],
	features: {
		S: { head: { clause: { predicate: ?pred, tense: ?tense, deepDirectObject: ?s2, preposition: { category: ?prepcat, object: ?s3} } } },
		premodifier: { head: { syntax: ?adverb } },
		NP1: { head: { agreement: ?agr, syntax: ?s2 } },
		auxPsv: { head: { syntax: { predicate: 'be'} } },
		VP: { head: { agreement: ?agr, syntax: { predicate: ?pred } } },
		preposition: { head: { syntax: { category: ?prepcat} } },
		NP2: { head: {syntax: ?s3} }
	}
]

[
	// passive declarative sentence
	// (yes, ) Lord Byron was influenced by John Milton

	rule:
		S => premodifier NP1 auxPsv VP passivisationPreposition NP2,
	condition:
		[ S: [ head: [ sentenceType: 'declarative', voice: 'passive' ] ] ],
	features: {
		S: { head: { clause: { predicate: ?pred, tense: ?t1, deepSubject: ?s1, deepDirectObject: ?s2, adverb: ?adverb } } },
		premodifier: { head: { syntax: ?adverb } },
		NP1: { head: { agreement: ?agr, syntax: ?s2 } },
		auxPsv: { head: { syntax: { tense: ?t1 } } },
		VP: { head: { agreement: ?agr, syntax: { predicate: ?pred } } },
		passivisationPreposition: { },
		NP2: { head: {syntax: ?s1 } }
	}
]

[
	// active declarative sentence with a preposition
	// Lord Byron died in Missolonghi

	rule:
		S => premodifier NP1 VP preposition NP2,
	condition:
		[ S: [ head: [ sentenceType: 'declarative', voice: 'active', clause: [ preposition: match, deepSubject: match ] ] ] ],
	features: {
		S: { head: { clause: { predicate: ?pred, tense: ?tense, deepSubject: ?s1, preposition: { category: ?prepcat, object: ?s3 } } } },
		premodifier: { },
		NP1: { head: { agreement: ?agr, syntax: ?s1 } },
		VP: { head: { agreement: ?agr, syntax: { predicate: ?pred, tense: ?tense } } },
		preposition: { head: { syntax: { category: ?prepcat } } },
		NP2: { head: {syntax: ?s3 } }
	}
]

[
	// active declarative sentence with a preposition
	// Lord Byron was born in London

	rule:
		S => premodifier NP1 auxBe VP preposition NP2,
	condition:
		[ S: [ head: [ sentenceType: 'declarative', voice: 'active', clause: [ preposition: match, deepDirectObject: match ] ] ] ],
	features: {
		S: { head: { clause: { predicate: ?pred, tense: ?tense, deepDirectObject: ?s2, adverb: ?adverb, preposition: { category: ?prepcat, object: ?s3 } } } },
		premodifier: { head: { syntax: ?adverb } },
		NP1: { head: { agreement: ?agr, syntax: ?s2 } },
		auxBe: {  head: { syntax: { tense: ?tense } } },
		VP: { head: { agreement: ?agr, syntax: { predicate: ?pred } } },
		preposition: { head: { syntax: { category: ?prepcat } } },
		NP2: { head: {syntax: ?s3 } }
	}
]

[
	// active declarative sentence with third argument
	// John gives Mary flowers

	rule:
		S => NP1 VP NP2 NP3,
	condition:
		[ S: [ head: [ sentenceType: 'declarative', voice: 'active', clause: [ deepIndirectObject: match ] ] ] ],
	features: {
		S: { head: { clause: { predicate: ?pred, deepSubject: ?s1, deepDirectObject: ?s2, deepIndirectObject: ?s3 } } },
		NP1: { head: { agreement: ?agr, syntax: ?s1 } },
		VP: { head: { agreement: ?agr, syntax: { predicate: ?pred } } },
		NP2: { head: { syntax: ?s3 } },
		NP3: { head: { syntax: ?s2 } }
	}
]

[
	// active declarative sentence with 'be' as verb
	// (yes, ) Ada Lovelace was the daughter of Lord Byron

	rule:
		S => premodifier NP1 auxBe NP2,
	condition:
		[ S: [ head: [ sentenceType: 'declarative', voice: 'active', clause: [ predicate: 'be' ] ] ] ],
	features: {
		S: { head: { clause: { predicate: ?pred, tense: ?tense, deepSubject: ?s1, deepDirectObject: ?s2, adverb: ?adverb } } },
		premodifier: { head: { syntax: ?adverb } },
		NP1: { head: { agreement: ?agr, syntax: ?s1 } },
		auxBe: { head: { syntax: { tense: ?tense } } },
		NP2: { head: { syntax: ?s2 } }
	}
]

[
	// simple active declarative sentence
	// John likes Mary

	rule:
		S => NP1 VP NP2,
	condition:
		[ S: [ head: [ sentenceType: 'declarative', voice: 'active' ] ] ],
	features: {
		S: { head: { clause: { predicate: ?pred, tense: ?tense, deepSubject: ?s1, deepDirectObject: ?s2 } } },
		NP1: { head: { agreement: ?agr, syntax: ?s1 } },
		VP: { head: { agreement: ?agr, syntax: { predicate: ?pred, tense: ?tense } } },
		NP2: { head: { syntax: ?s2 } }
	}
]

[
	// 'yes' or 'no' answers

	rule:
		S => adverb,
	condition:
		[ S: [ head: [ modifier: match ] ] ],
	features: {
		S: { head: { clause: { modifier: ?modifier } } },
		adverb: { head: { syntax: ?modifier } }
	}
]

[
	// yes, ...

	rule:
		premodifier => adverb punctuationMark,
	condition:
		[ premodifier: [ head: [ syntax: match ] ] ],
	features: {
		premodifier: { head: { syntax: { category: ?cat } } },
		adverb: { head: { syntax: { category: ?cat } } },
		punctuationMark: { head: { syntax: { category: 'comma' } } }
	}
]

[
	// null rule, needed to fill the empty optional clause

	rule:
		premodifier =>,
	condition:
		[ ],
	features: {
	}
]

[
	// the car in the lot

	rule:
		NP1 => NP2 PP,
	condition:
		[ NP1: [ head: [ syntax: [ category: match, preposition: match ] ] ] ],
	features: {
		NP1: { head: { syntax: { category: ?cat, preposition: ?prep, determiner: ?det } } },
		NP2: { head: { syntax: { category: ?cat, determiner: ?det } } },
		PP: { head: { syntax: ?prep } }
	}
]

[
	// the car

	rule:
		NP => determiner noun,
	condition:
		[ NP: [ head: [ syntax: [ category: match, determiner: match ] ] ] ],
	features: {
		NP: { head: { syntax: { category: ?cat, determiner: { category: ?det } } } },
		determiner: { head: { syntax: { category: ?det } } },
		noun: { head: { syntax: { category: ?cat } } }
	}
]

[
	// car

	rule:
		NP => noun,
	condition:
		[ NP: [ head: [ syntax: [ category: match ] ] ] ],
	features: {
		NP: { head: { syntax: { category: ?cat } } },
		noun: { head: { syntax: { category: ?cat } } }
	}
]

[
	// a name

	rule:
		NP => PN,
	condition:
		[ NP: [ head: [ syntax: [ name: match ] ] ] ],
	features: {
		NP: { head: { syntax: { name: ?name, middlename: ?m, lastname: ?l } } },
		PN: { head: { syntax: { name: ?name, middlename: ?m, lastname: ?l } } }
	}
]

[
	// Anne Isabelle Milbanke

	rule:
		PN => propernoun1 propernoun2 propernoun3,
	condition:
		[ PN: [ head: [ syntax: [ name: match, middlename: match, lastname: match ] ] ] ],
	features: {
		PN: { head: { syntax: { name: ?name, middlename: ?m, lastname: ?l } } },
		propernoun1: { head: { syntax: { name: ?name } } },
		propernoun2: { head: { syntax: { name: ?m } } },
		propernoun3: { head: { syntax: { name: ?l } } }
	}
]

[
	// Lord Byron

	rule:
		PN => propernoun1 propernoun2,
	condition:
		[ PN: [ head: [ syntax: [ name: match, lastname: match ] ] ] ],
	features: {
		PN: { head: { syntax: { name: ?name, lastname: ?l } } },
		propernoun1: { head: { syntax: { name: ?name } } },
		propernoun2: { head: { syntax: { name: ?l } } }
	}
]

[
	// John

	rule:
		PN => propernoun,
	condition:
		[ PN: [ head: [ syntax: [ name: match ] ] ] ],
	features: {
		PN: { head: { syntax: { name: ?name } } },
		propernoun: { head: { syntax: { name: ?name } } }
	}
]

[
	// drives a car

	rule:
		VP => verb NP,
	condition:
		[ VP: [ head: [ syntax: [ predicate: match, category: match ] ] ] ],
	features: {
		VP: { head: { syntax: { tense: ?tense, predicate: ?pred } } },
		verb: { head: { syntax: { tense: ?tense, predciate: ?pred } } },
		NP: { }
	}
]

[
	// drives

	rule:
		VP => verb,
	condition:
		[ VP: [ head: [ syntax: [ predicate: match ] ] ] ],
	features: {
		VP: { head: { syntax: { tense: ?tense, predicate: ?pred } } },
		verb: { head: { syntax: { tense: ?tense, predicate: ?pred } } }
	}
]

[
	// in the lot

	rule:
		PP => preposition NP,
	condition:
		[ ],
	features: {
		PP: { head: { syntax: { category: ?cat, object: ?obj } } },
		preposition: { head: { syntax: { category: ?cat } } },
		NP: { head: { syntax: ?obj } }
	}
]




// new rules!

# Clause

// Yes, Harry met Sally
[
	rule:
		S => adverb punctuationMark SDecl,
	condition1:
		qualification(S.event, S.qualification),
	bind: {
		SDecl.event = S.event;
		adverb.event = S.qualification
	}
]

// Declarative sentences
[
	rule:
		S => SDecl,
	condition1:
		mood(S.event, Declarative),
	bind: {
		SDecl.event = S.event
	}
]

# Declarative sentence

// Copular sentence with complement
// The ball is a toy.
[
	rule:
		SDecl => NP1 auxBe NP2,
	condition1:
		subject(S.event, S.subject) and complement(S.event, S.complement),
	bind: {
		NP1.entity = S.subject;
		NP2.entity = S.complement
	}
]

// Copular sentence with modifier
// The ball is round.
[
	rule:
		SDecl => NP auxBe AP,
	condition1:
		subject(S.event, S.subject) and modifier(S.event, S.complement),
	bind: {
		NP.entity = S.subject;
		AP.entity = S.complement
	}
]

// Passive declarative
// Lord Byron was influenced by John Milton
// See: The structure of modern english (2000), p 202
[
	rule:
		SDecl => NP auxPsv VP,
	condition1:
		subject(S.event, S.subject) and object(S.event, S.object) and voice(S.event, Passive),
	bind: {
		NP.entity = S.object;
		auxPsv.event = S.event;
		VP.event = S.event;
		VP.subject = S.subject;
		VP.object = S.object
	}
]

[
	rule:
		SDecl => NP auxBe VP,
	condition1:
		subject(S.event, S.subject) and aspect(S.event, Perfect),
	bind: {
		NP.entity = S.subject;
		auxBe.event = S.event;
		VP.event = S.event
	}
]

// John Walks
[
	rule:
		SDecl => NP VP,
	condition1:
		subject(S.event, S.subject),
	bind: {
		NP.entity = S.subject;
		VP.event = S.event
	}
]

# Noun Phrase


// Lord Byron
[
	rule:
		NP => propernoun,
	condition1:
		name(NP.entity, ?name),
	bind: {
		propernoun.entity = NP.entity
	}
]

// the author of Paradise Lost
[
	rule:
		NP => DP NBar,
	bind: {
		DP.entity = NP.entity;
		NBar.entity = NP.entity
	}
]

// Lord Byron
[
	rule:
		NP => noun,
	condition1:
		name(NP.entity, ?name),
	bind: {
		noun.entity = NP.entity
	}
]

# Determiner Phrase

// the
[
	rule:
		DP => determiner,
	bind: {
		determiner.entity = DP.entity
	}
]

# determiner

// the
[
	rule:
		determiner => word,
	condition1:
		determiner(determiner.entity, ?det),
	word:
		determiner(determiner.entity, ?det)
]

# NBar

// author of Paradise Lost
[
	rule:
		NBar => NBar PP,
	condition1:
		link(?link, NBar.entity, ?entity),
	bind: {
		NBar.entity = NBar.entity;
		PP.superObject = NBar.entity
	}
]

// author
[
	rule:
		NBar => noun,
	bind: {
		noun.object = NBar.entity
	}
]

# Propositional Phrase

// of Paradise Lost
[
	rule:
		PP => preposition NP,
	condition1:
    	link(?link, PP.superObject, PP.subObject),
    bind: {
        preposition.superObject = PP.superObject;
        preposition.subObject = PP.subObject;
        NP.entity = PP.subObject
    }
]

# Adjective Phrase

// 53 years old
[
	rule:
		AP => NP adjective,
	condition1:
		modifier(AP.entity, AP.modifier),
	bind: {
		NP.entity = AP.modifier;
		adjective.object = AP.entity
	}
]

// old
[
	rule:
		AP => adjective,
	bind: {
		adjective.object = AP.entity
	}
]

# adjective

// old
[
	rule:
		adjective => word,
	condition1:
		isa(adjective.object, ?type),
	word:
		isa(adjective.object, ?type)
]

# noun

// author
[
	rule:
		noun => word,
	condition1:
		isa(noun.object, ?type),
	word:
		isa(noun.object, ?type)
]

# propernoun

// Lord Byron
[
	rule:
		propernoun => word,
	condition1:
		name(propernoun.entity, ?name),
	word:
		name(propernoun.entity, ?name)
]

# Verb Phrase

// influenced by John Milton
[
	rule:
		VP => pastParticipleVerb passivisationPreposition NP,
	condition1:
		isa(VP.event, ?type) and subject(VP.event, VP.subject) and voice(VP.event, Passive),
	bind: {
		pastParticipleVerb.event = VP.event;
		passivisationPreposition.event = VP.event;
		passivisationPreposition.subject = VP.subject;
		NP.entity = VP.subject
	}
]

// married to Anne Isabella Milbanke
[
	rule:
		VP => pastParticipleVerb PP,
	condition1:
		isa(VP.event, ?type) and link(?link, VP.event, VP.object),
	bind: {
		pastParticipleVerb.event = VP.event;
		NP.entity = VP.object
	}
]

// influenced Lord Byron
[
	rule:
		VP => simpleVerb NP,
	condition1:
		isa(VP.event, ?type) and object(VP.event, VP.object),
	bind: {
		simpleVerb.event = VP.event;
		NP.entity = VP.object
	}
]

// walks
[
	rule:
		VP => simpleVerb,
	condition1:
		isa(VP.event, ?type),
	bind: {
		simpleVerb.event = VP.event
	}
]

# passivisationPreposition

// by (passivisation)
[
	rule:
		passivisationPreposition => word
]

# punctuationMark

// ,
[
	rule:
		punctuationMark => word
]

# conjunction

// and
[
	rule:
		conjunction => word,
	condition1:
		link(?cp, conjunction.node, conjunction.firstEntity, conjunction.secondEntity),
	word:
		link(?cp, conjunction.node, conjunction.firstEntity, conjunction.secondEntity)
]

# auxPsv

// was (passive)
[
	rule:
		auxPsv => word,
	condition1:
		tense(auxPsv.event, ?tense),
	word:
		tense(auxPsv.event, ?tense)
]

# auxBe

// was (auxilliary)
[
	rule:
		auxBe => word,
	condition1:
		tense(auxBe.event, ?tense),
	word:
		tense(auxBe.event, ?tense)
]

# adverb

// yes
[
	rule:
		adverb => word,
	condition1:
		isa(adverb.event, ?type),
	word:
		isa(adverb.event, ?type)
]

# preposition

// of
[
	rule:
		preposition => word,
	condition1:
		link(?prep, ?super, ?sub),
	word:
		link(?prep, ?super, ?sub)
]

# pastParticipleVerb

[
	rule:
		pastParticipleVerb => word,
	condition1:
		isa(verb.event, ?type) and isa(pastParticipleVerb.event, ?type),
	word:
		isa(verb.event, ?type) and tense(pastParticipleVerb.event, ?tense)
]

# simpleVerb

// verb, explicit tense
[
	rule:
		simpleVerb => word,
	condition1:
		isa(verb.event, ?type) and tense(verb.event, ?tense),
	word:
		isa(verb.event, ?type) and tense(verb.event, ?tense)
]

// verb, implicit
[
	rule:
		simpleVerb => word,
	condition1:
		isa(verb.event, ?type),
	word:
		isa(verb.event, ?type) and tense(verb.event, Present)
]