# Clause

// Yes, Harry met Sally
[
	rule:
		S => adverb punctuationMark SDecl,
	condition:
		qualification(S.event, S.qualification),
	bind: {
		SDecl.event = S.event;
		adverb.event = S.qualification
	}
]

// Declarative sentences
[
	rule:
		S => SDecl,
	condition:
		mood(S.event, Declarative),
	bind: {
		SDecl.event = S.event
	}
]

# Declarative sentence

// Copular sentence with complement
// The ball is a toy.
[
	rule:
		SDecl => NP1 auxBe NP2,
	condition:
		subject(S.event, S.subject) and complement(S.event, S.complement),
	bind: {
		NP1.entity = S.subject;
		NP2.entity = S.complement
	}
]

// Copular sentence with modifier
// The ball is round.
[
	rule:
		SDecl => NP auxBe AdjP,
	condition:
		subject(S.event, S.subject) and modifier(S.event, S.complement),
	bind: {
		NP.entity = S.subject;
		AdjP.entity = S.complement
	}
]

// Passive declarative
// Lord Byron was influenced by John Milton
// See: The structure of modern english (2000), p 202
[
	rule:
		SDecl => NP auxPsv VP,
	condition:
		subject(S.event, S.subject) and object(S.event, S.object) and voice(S.event, Passive),
	bind: {
		NP.entity = S.object;
		auxPsv.event = S.event;
		VP.event = S.event;
		VP.subject = S.subject;
		VP.object = S.object
	}
]

[
	rule:
		SDecl => NP auxBe VP,
	condition:
		subject(S.event, S.subject) and aspect(S.event, Perfect),
	bind: {
		NP.entity = S.subject;
		auxBe.event = S.event;
		VP.event = S.event
	}
]

// John Walks
[
	rule:
		SDecl => NP VP,
	condition:
		subject(S.event, S.subject),
	bind: {
		NP.entity = S.subject;
		VP.event = S.event
	}
]

# Noun Phrase


// Lord Byron
[
	rule:
		NP => propernoun,
	condition:
		name(NP.entity, ?name),
	bind: {
		propernoun.entity = NP.entity
	}
]

// the author of Paradise Lost
[
	rule:
		NP => DP NBar,
	bind: {
		DP.entity = NP.entity;
		NBar.entity = NP.entity
	}
]

// Lord Byron
[
	rule:
		NP => noun,
	condition:
		name(NP.entity, ?name),
	bind: {
		noun.entity = NP.entity
	}
]

# Determiner Phrase

// the
[
	rule:
		DP => determiner,
	bind: {
		determiner.entity = DP.entity
	}
]

# determiner

// the
[
	rule:
		determiner => word,
	condition:
		determiner(determiner.entity, ?det),
	word:
		determiner(determiner.entity, ?det)
]

# NBar

// author of Paradise Lost
[
	rule:
		NBar => NBar PP,
	condition:
		link(?link, NBar.entity, ?entity),
	bind: {
		NBar.entity = NBar.entity;
		PP.superEntity = NBar.entity
	}
]

// author
[
	rule:
		NBar => noun,
	bind: {
		noun.entity = NBar.entity
	}
]

# Propositional Phrase

// of Paradise Lost
[
	rule:
		PP => preposition NP,
	condition:
    	link(?link, PP.superEntity, PP.subEntity),
    bind: {
        preposition.superEntity = PP.superEntity;
        preposition.subEntity = PP.subEntity;
        NP.entity = PP.subEntity
    }
]

# Adjective Phrase

// 53 years old
[
	rule:
		AdjP => NP adjective,
	condition:
		modifier(AdjP.entity, AdjP.modifier),
	bind: {
		NP.entity = AdjP.modifier;
		adjective.entity = AdjP.entity
	}
]

// old
[
	rule:
		AdjP => adjective,
	bind: {
		adjective.entity = AdjP.entity
	}
]

# adjective

// old
[
	rule:
		adjective => word,
	condition:
		isa(adjective.entity, ?type),
	word:
		isa(adjective.entity, ?type)
]

# noun

// author
[
	rule:
		noun => word,
	condition:
		isa(noun.entity, ?type),
	word:
		isa(noun.entity, ?type)
]

# propernoun

// Lord Byron
[
	rule:
		propernoun => word,
	condition:
		name(propernoun.entity, ?name),
	word:
		name(propernoun.entity, ?name)
]

# Verb Phrase

// influenced by John Milton
[
	rule:
		VP => pastParticipleVerb passivisationPreposition NP,
	condition:
		isa(VP.event, ?type) and subject(VP.event, VP.subject) and voice(VP.event, Passive),
	bind: {
		pastParticipleVerb.event = VP.event;
		passivisationPreposition.event = VP.event;
		passivisationPreposition.subject = VP.subject;
		NP.entity = VP.subject
	}
]

// married to Anne Isabella Milbanke
[
	rule:
		VP => pastParticipleVerb PP,
	condition:
		isa(VP.event, ?type) and link(?link, VP.event, VP.object) and aspect(VP.event, Perfect),
	bind: {
		pastParticipleVerb.event = VP.event;
		PP.entity = VP.object
	}
]

// died in Missolonghi
[
	rule:
		VP => simpleVerb PP,
	condition:
		isa(VP.event, ?type) and link(?link, VP.event, VP.object),
	bind: {
		simpleVerb.event = VP.event;
		PP.entity = VP.object
	}
]

// influenced Lord Byron
[
	rule:
		VP => simpleVerb NP,
	condition:
		isa(VP.event, ?type) and object(VP.event, VP.object),
	bind: {
		simpleVerb.event = VP.event;
		NP.entity = VP.object
	}
]

// walks
[
	rule:
		VP => simpleVerb,
	condition:
		isa(VP.event, ?type),
	bind: {
		simpleVerb.event = VP.event
	}
]

# passivisationPreposition

// by (passivisation)
[
	rule:
		passivisationPreposition => word
]

# punctuationMark

// ,
[
	rule:
		punctuationMark => word
]

# conjunction

// and
[
	rule:
		conjunction => word,
	condition:
		link(?cp, conjunction.node, conjunction.firstEntity, conjunction.secondEntity),
	word:
		link(?cp, conjunction.node, conjunction.firstEntity, conjunction.secondEntity)
]

# auxPsv

// was (passive)
[
	rule:
		auxPsv => word,
	condition:
		tense(auxPsv.event, ?tense),
	word:
		tense(auxPsv.event, ?tense)
]

# auxBe

// was (auxilliary)
[
	rule:
		auxBe => word,
	condition:
		tense(auxBe.event, ?tense),
	word:
		tense(auxBe.event, ?tense)
]

# adverb

// yes
[
	rule:
		adverb => word,
	condition:
		isa(adverb.event, ?type),
	word:
		isa(adverb.event, ?type)
]

# preposition

// of
[
	rule:
		preposition => word,
	condition:
		link(?prep, ?super, ?sub),
	word:
		link(?prep, ?super, ?sub)
]

# pastParticipleVerb

[
	rule:
		pastParticipleVerb => word,
	condition:
		isa(pastParticipleVerb.event, ?type) and isa(pastParticipleVerb.event, ?type),
	word:
		isa(pastParticipleVerb.event, ?type) and tense(pastParticipleVerb.event, ?tense)
]

# simpleVerb

// verb, explicit tense
[
	rule:
		simpleVerb => word,
	condition:
		isa(simpleVerb.event, ?type) and tense(simpleVerb.event, ?tense),
	word:
		isa(simpleVerb.event, ?type) and tense(simpleVerb.event, ?tense)
]

// verb, implicit
[
	rule:
		simpleVerb => word,
	condition:
		isa(simpleVerb.event, ?type),
	word:
		isa(simpleVerb.event, ?type) and tense(simpleVerb.event, Present)
]