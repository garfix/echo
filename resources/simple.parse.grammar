[
	// John drives / She died

	rule:
		S => NP VP,
	features: {
		S: { head: ?h1 { sentenceType: 'declarative', voice: 'active', clause: ?s1 } },
		NP: { head: { agreement: ?agr, syntax: ?syntax } },
		VP: { head: ?h1 { agreement: ?agr, syntax: ?s1 { deepSubject: ?syntax } } }
	},
	semantics: {
		S.sem = NP.sem and VP.sem and subject(S.event, S.subject) and object(S.event, S.object);
    	S.event = VP.event;
    	S.subject = NP.object;
    	S.object = VP.object
	}
]

[
	// Lady Lovelace was born

	// NOT USED?

	rule:
		S => NP aux VP,
	features: {
		S: { head: ?h1 { sentenceType: 'declarative', voice: 'active', clause: ?s1 } },
		NP: { head: { agreement: ?agr, syntax: ?syntax } },
		aux: { },
		VP: { head: ?h1 { agreement: ?agr, syntax: ?s1 { deepSubject: ?syntax } } }
	}
]

[
	// Drive! / Book that flight / She died

	rule:
		S => VP,
	features: {
		S: { head: { sentenceType: 'imperative', clause: ?s1 } },
		VP: { head: { syntax: ?s1 } }
	},
	semantics: {
		S.sem = VP.sem and object(S.event, S.object);
		S.event = VP.event;
		S.object = VP.object
	}
]

[
	// Who Is John? / How many children had Lord Byron? / Who were Lord Byron's parents?

	rule:
		S => WhADVP VP NP,
	features: {
		S: { head: ?h1 { sentenceType: 'wh-question', voice: 'active', clause: ?s1 } },
		WhADVP: { head: { syntax: ?s1 } },
		VP: { head: ?h1 { syntax: ?s1 { deepSubject: ?s2}, agreement: ?agr } },
		NP: { head: { syntax: ?s2, agreement: ?agr } }
	},
	semantics: {
		S.sem = WhADVP.sem and VP.sem and NP.sem and subject(S.event, S.subject) and object(S.event, S.object) and request(S.request);
        S.event = VP.event;
        S.subject = NP.object;
        S.subject = WhADVP.subject;
        S.object = WhADVP.object;
        S.request = WhADVP.request;
        S.event = WhADVP.event
	}
]

[
	// Where was John born?

	rule:
        S => WhADVP auxBe NP VP,
    features: {
        S: { head: ?h1 { sentenceType: 'wh-question', voice: 'active', clause: ?s1 { tense: ?tense } } },
        WhADVP: { head: { syntax: ?s1 } },
        auxBe: { head: { syntax: { tense: ?tense } } },
        NP: { head: { syntax: ?s2, agreement: ?agr } },
        VP: { head: ?h1 { syntax: ?s1 { deepDirectObject: ?s2}, agreement: ?agr } }
    },
    semantics: {
		S.sem = WhADVP.sem and auxBe.sem and NP.sem and VP.sem and subject(S.event, S.subject) and request(S.request);
		S.event = WhADVP.event;
		S.event = VP.event;
		S.subject = NP.object;
		S.request = WhADVP.request
    }
]

[
	// Was John driving?

	rule:
        S => aux NP VP,
    features: {
        S: { head: ?h1 { sentenceType: 'yes-no-question', voice: 'active', clause: ?s3 } },
        aux: { head: { agreement: ?agr } },
        NP: { head: { agreement: ?agr, syntax: ?s1 } },
        VP: { head: ?h1 { agreement: ?agr, syntax: ?s3 { deepDirectObject: ?s1 } } }
    },
    semantics: {
		S.sem = NP.sem and VP.sem and subject(S.event, S.subject);
		S.event = VP.event;
		S.subject = NP.object
    }
]

[
	// Was the car driven by John?

	rule:
        S => aux NP1 VP passivisationPreposition NP2,
    features: {
        S: { head: ?h1 { sentenceType: 'yes-no-question', voice: 'passive', clause: ?s3 } },
        aux: { },
        NP1: { head: { agreement: ?agr, syntax: ?s1 } },
        VP: { head: ?h1 { agreement: ?agr, syntax: ?s3 { predicate: ?p, deepSubject: ?s2, deepDirectObject: ?s1 } } },
        passivisationPreposition: {},
        NP2: { head: { syntax: ?s2 }}
    },
    semantics: {
        S.sem = NP1.sem and NP2.sem and VP.sem and subject(S.event, S.subject) and object(S.event, S.object);
        S.event = VP.event;
        S.subject = NP2.object;
        S.object = NP1.object
    }
]

[
	// Was John a fool?
	// Was Ada Lovelace the daughter of Lord Byron?

	rule:
        S => auxBe NP1 NP2,
    features: {
        S: { head: ?h1 { sentenceType: 'yes-no-question', voice: 'active', clause: ?s3 } },
        auxBe: { head: ?h1 { syntax: ?s3 { tense: ?tense, type: 'clause', deepSubject: ?s1, deepDirectObject: ?s2 }} },
        NP1: { head: { syntax: ?s1 } },
        NP2: { head: { syntax: ?s2 } }
    },
    semantics: {
       S.sem = auxBe.sem and NP1.sem and NP2.sem and subject(S.event, S.subject);
       S.subject = NP2.object;
       S.subject = NP1.object
    }

]

[
	// How old was Mary Shelley?

	rule:
        S => WhADVP auxBe NP,
    features: {
        S: { head: ?h1 { sentenceType: 'wh-question', voice: 'active', clause: ?s3, relativeClause: ?s4 } },
        WhADVP: { head: { syntax: ?s3 } },
        auxBe: { head: ?h1 { agreement: ?agr, syntax: ?s3 { type: 'clause', deepSubject: ?s1 } } },
        NP: { head: { agreement: ?agr, syntax: ?s1 } }
    },
    semantics: {
        S.sem = WhADVP.sem and auxBe.sem and NP.sem and subject(S.event, S.subject) and request(S.request);
        S.event = WhADVP.object;
        S.event = auxBe.event;
        S.subject = NP.object;
        S.request = WhADVP.request
    }

]

[
	// How old was Mary Shelley when she died?

	rule:
		S1 => S2 SBar,
	features: {
		S1: { head: ?h1 { relativeClause: ?s1 } },
		S2: { head: ?h1 },
		SBar: { head: { syntax: ?s1 } }
	},
	semantics: {
		S1.sem = S2.sem and SBar.sem;
		S1.event = S2.event;
		S1.subject = S2.subject;
		S1.object = S2.object;
		S1.event = SBar.superEvent;
		S1.request = S2.request
	}
]

[
	// S-Bar, see 'The structure of modern english' - Brinton (2000) - p. 230

	rule:
		SBar => whAdverb S,
	features: {
		SBar: { head: { syntax: { type: 'relativeClause', clause: ?s2, complementizer: ?cat } } },
		whAdverb: { head: { syntax: { category: ?cat } } },
		S: { head: { syntax: ?s2 } }
	},
	semantics: {
		SBar.sem = whAdverb.sem and S.sem;
		SBar.superEvent = whAdverb.event;
		SBar.subEvent = whAdverb.adjunct;
		SBar.subEvent = S.event
	}
]

// Verb Phrase

[
	// drives

	rule:
		VP => verb,
	features: {
		VP: { head: ?h1 {syntax: { type: 'clause' } } },
		verb: { head: ?h1 }
	},
	semantics: {
		VP.sem = verb.sem;
		VP.event = verb.event
	}
]

[
	// book that flight! / sees the book
	// Name Lord Byron's children.

	rule:
		VP => verb NP,
	features: {
		VP: { head: ?h1 {syntax: ?s1 { type: 'clause' } } },
		verb: { head: ?h1 { syntax: ?s1 { deepDirectObject: ?object } } },
		NP: { head: { syntax: ?object } }
	},
	semantics: {
		VP.sem = verb.sem and NP.sem and object(VP.event, VP.object);
		VP.event = verb.event;
		VP.object = NP.object
	}
]

[
	// gives Mary flowers

	rule:
		VP => verb NP1 NP2,
	features: {
		VP: { head: ?h1 {syntax: ?s1 { type: 'clause' } } },
		verb: { head: ?h1 { arguments: 2, syntax: ?s1 { deepDirectObject: ?directObject, deepIndirectObject: ?indirectObject } } },
		NP1: { head: { syntax: ?indirectObject } },
		NP2: { head: { syntax: ?directObject } }
	},
	semantics: {


// S ??? => VP

		S.sem = verb.sem and NP1.sem and NP2.sem and subject(S.event, S.subject) and object(S.event, S.object);
		S.event = VP.event;
		S.subject = NP1.object;
		S.object = NP2.object
	}
]

[
	// drives quickly

// todo: create test sentence

	rule:
VPQ => verb AP,
	features: {
		VP: { head: ?h1 {arguments: 0, syntax: ?s1 { type: 'clause' } } },
		verb: { head: ?h1 { syntax: ?s1 } },
		AP: { }
	},
	semantics: {
		VP.sem = verb.sem and AP.sem;
		VP.event = verb.event;
		VP.subject = AP.object
	}
]

[
	// ben 43 jaar oud

	rule:
		VP => copula AP,
	features: {
		VP: { head: ?h1 { arguments: 0, syntax: ?s1 { type: 'clause', complement: ?object } } },
		copula: { head: ?h1 { syntax: ?s1 } },
		AP: { head: { syntax: { object: ?object } } }
	},
	semantics: {
		VP.sem = AP.sem;
		VP.event = AP.event;
		VP.object = AP.object
	}
]

[
	// driven by John

	rule:
		VP => verb PP,
	features: {
		VP: { head: ?h1 { syntax: ?s1 { type: 'clause' } } },
		verb: { head: ?h1 { syntax: ?s1 { preposition: ?prep } } },
		PP: { head: { syntax: ?prep } }
	},
	semantics: {
		VP.sem = verb.sem and PP.sem;
		VP.event = verb.event;
		VP.event = PP.superObject
	}
]

// Wh-adverb phrase


[
	// who

	rule:
        WhADVP => whAdverb,
    features: {
        WhADVP: {  },
        whAdverb: { head: { syntax: { category: "identity"} } }
    },
    semantics: {
        WhADVP.sem = whAdverb.sem;
        WhADVP.request = whAdverb.name;
        WhADVP.event = whAdverb.event;
        WhADVP.subject = whAdverb.subject
    }
]

[
	// where, when

	rule:
        WhADVP => whAdverb,
    features: {
        WhADVP: { head: { syntax: { preposition: { type: 'preposition', category: ?cat, object: { type: 'entity', question: 1 } } } } },
        whAdverb: { head: { syntax: { category: ?cat } } }
    },
    semantics: {
        WhADVP.sem = whAdverb.sem;
        WhADVP.request = whAdverb.adjunct;
        WhADVP.event = whAdverb.event
    }
]

[
	// which car, how many children

	rule:
        WhADVP => whwordNP NP,
    features: {
        WhADVP: { head: ?h1 },
        whwordNP: { head: ?h1 { variables: { role: ?role } } },
        NP: { head: { syntax: ?role } }
    },
    semantics: {
		WhADVP.sem = whwordNP.sem and NP.sem;
		WhADVP.object = whwordNP.object;
		WhADVP.object = NP.object;
		WhADVP.request = whwordNP.adjunct
    }
]

// Noun Phrase

[
	// John

	rule:
        NP => PN,
    features: {
        NP: { head: ?h1 { syntax: { type: 'entity' } } },
        PN: { head: ?h1 }
    },
    semantics: {
		NP.sem = PN.sem;
        NP.object = PN.object
    }
]

[
	// he

	rule:
        NP => pronoun,
    features: {
        NP: { head: ?h1 { syntax: { type: 'entity' } } },
        pronoun: { head: ?h1 }
    },
    semantics: {
		NP.sem = pronoun.sem;
        NP.object = pronoun.object
    }
]

[
	// the car

	rule:
        NP => DP NBar,
    features: {
        NP: { head: ?h1 { syntax: ?s1 { type: 'entity' } } },
        DP: { head: { syntax: ?entity } },
        NBar: { head: ?h1 { syntax: ?s1 { determiner: ?entity } } }
    },
    semantics: {
		NP.sem = DP.sem and NBar.sem;
        NP.object = NBar.object;
        NP.object = DP.superObject
    }
]

[
	// (large) car (in the lot)

	rule:
        NP => NBar,
    features: {
        NP: { head: ?h1 { syntax: ?s1 { type: 'entity' } } },
        NBar: { head: ?h1 { syntax: ?s1 } }
    },
    semantics: {
		NP.sem = NBar.sem;
        NP.object = NBar.object
    }
]

// N-Bar

[
	// car

	rule:
        NBar => noun,
    features: {
        NBar: { head: ?h1 },
        noun: { head: ?h1 }
    },
    semantics: {
		NBar.sem = noun.sem;
        NBar.object = noun.object
    }
]

[
	// blue car

	rule:
        NBar1 => AP NBar2,
    features: {
        NBar1: { head: ?h1 },
        AP: { },
        NBar2: { head: ?h1 }
    },
    semantics: {
		NBar1.sem = AP.sem and NBar2.sem;
        NBar1.object = NBar2.object
    }
]

[
	// car in the lot
	// the author of Paradise Lost

	// TODO: change NBar into NBar1 (strange DBPedia fail)

	rule:
        NBar => NBar2 PP,
    features: {
        NBar: { head: { syntax: ?s1 } },
        NBar2: { head: { syntax: ?s1 { preposition: ?prep } } },
        PP: { head: { syntax: ?prep } }
    },
    semantics: {
		NBar.sem = NBar2.sem and PP.sem;
        NBar.object = NBar2.object;
        NBar.object = PP.superObject
    }
]

// Proper Name

[
	// John, "Lord Byron (the first)"

	rule:
        PN => propernoun,
    features: {
        PN: { head: { syntax: { type: 'entity', name: ?name } } },
        propernoun: { head: { syntax: { name: ?name } } }
    },
    semantics: {
		PN.sem = name(PN.object, propernoun.text);
        PN.object = propernoun.object
    }
]

[
	// Lord Byron, Ada Lovelace

	rule:
        PN => propernoun1 propernoun2,
    features: {
        PN: { head: { syntax: { type: 'entity', name: ?firstName, lastname: ?lastName } } },
        propernoun1: { head: { syntax: { name: ?firstName } } },
        propernoun2: { head: { syntax: { name: ?lastName } } }
    },
    semantics: {
		PN.sem = name(PN.object, propernoun1.text + " " + propernoun2.text);
        PN.object = propernoun1.object;
        PN.object = propernoun2.object
    }
]

[
	// Jan de Wit

	rule:
        PN => propernoun1 propernoun2 propernoun3,
    features: {
        PN: { head: { syntax: { type: 'entity', name: ?firstName, middlename: ?middleName, lastname: ?lastName } } },
        propernoun1: { head: { syntax: { name: ?firstName } } },
        propernoun2: { head: { syntax: { name: ?middleName } } },
        propernoun3: { head: { syntax: { name: ?lastName } } },
    },
    semantics: {
		PN.sem = name(PN.object, propernoun1.text + " " + propernoun2.text + " " + propernoun3.text);
        PN.object = propernoun1.object;
        PN.object = propernoun2.object;
        PN.object = propernoun3.object
    }
]

[
	// Jan de Wit

	rule:
        PN => propernoun1 insertion propernoun2,
    features: {
        PN: { head: ?h1 { syntax: { type: 'entity', name: ?firstName, insertion: ?insertion, lastname: ?lastName } } },
        propernoun1: { head: { syntax: { name: ?firstName } } },
        insertion: { head: { syntax: { insertion: ?insertion} } },
        propernoun2: { head: { syntax: { name: ?lastName } } }
    },
    semantics: {
        PN.sem = name(PN.object, propernoun1.text + " " + insertion.text + " " + propernoun2.text);
        PN.object = propernoun1.object;
        PN.object = propernoun2.object
    }
]

// Prepositional Phrase

[
	rule:
		PP => preposition NP,
	features: {
		PP: { head: ?h1 { syntax: ?s1 { type: 'preposition'} } },
		preposition: { head: ?h1 { syntax: ?s1 { object: ?object } } },
		NP: { head: { syntax: ?object } }
	},
	semantics: {
		PP.sem = preposition.sem and NP.sem;
		PP.superObject = preposition.superObject;
		PP.subObject = preposition.subObject;
		PP.subObject = NP.object
	}
]

// Adjectival Phrase

[
	// red

	rule:
		AP => adjective,
	features: {
		AP: { head: ?h1 },
		adjective: { head: ?h1 }
	},
	semantics: {
		AP.sem = adjective.sem
	}
]

[
	// fiercely barking

	rule:
		AP => AdvP adjective,
	features: {
		AP: { head: ?h1 },
		AdvP: { head: ?h1 },
		adjective: { head: ?h1 }
	},
	semantics: {
		AP.sem = AdvP.sem and adjective.sem
	}
]

[
	// bright red

	rule:
		AP => degreeAdverb adjective,
	features: {
		AP: { head: ?h1 },
		degreeAdverb: { head: ?h1 },
		adjective: { head: ?h1 }
	},
	semantics: {
		AP.sem = degreeAdverb.sem and adjective.sem
	}
]

[
	// (i am) 43 years old

	rule:
		AP => NP adjective,
	features: {
		AP: { head: { syntax: { object: ?object } } },
		NP: { },
		adjective: { head: { syntax: ?object } }
	},
	semantics: {
		AP.sem = NP.sem and adjective.sem
	}
]

// Adverbial Phrase

[
	// quickly

	rule:
        AdvP => adverb,
    features: {
        AdvP: { head: ?h1 },
        adverb: { head: ?h1 }
    },
    semantics: {
        AP.sem = AdvP.sem and adverb.sem
    }
]

[
	// very quickly

	rule:
        AdvP => degreeAdverb adverb,
    features: {
        AdvP: { head: ?h1 },
        degreeAdverb: { head: ?h1 },
        adverb: { head: ?h1 }
    },
    semantics: {
        AP.sem = AdvP.sem and degreeAdverb.sem and adverb.sem
    }
]

// Determiner Phrase

[
	// the

	// TODO NOT USED

	rule:
        DP => determiner,
    features: {
        DP: { head: ?h1 { syntax: { type: 'determiner' } } },
        determiner: { head: ?h1 }
    },
    semantics: {
        DP.sem = determiner.sem
    }
]

[
	// Byron's

	rule:
        DP => NP possessiveMarker,
    features: {
        DP: { head: ?h1 { syntax: ?s1 { type: 'determiner' } } },
        NP: { head: { syntax: ?object } },
        possessiveMarker: { head: ?h1 { syntax: ?s1 { object: ?object }}}
    },
    semantics: {
        DP.sem = NP.sem and possessiveMarker.sem;
        DP.subObject = possessiveMarker.subObject;
        DP.superObject = possessiveMarker.superObject;
        DP.subObject = NP.object
    }
]

[
	// 43 (years old)
	// 2 (blue cars)

	rule:
		DP => numeral,
	features: {
		DP: { head: { syntax: { type: 'determiner', object: ?object } } },
		numeral: { head: { syntax: { value: ?object } } }
	},
	semantics: {
		DP.sem = numeral.sem
	}
]

