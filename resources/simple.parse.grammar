[
	rule:
		S => Clause,
	semantics: {
		S.sem = Clause.sem and sentence(S.event);
		S.event = Clause.event;
		S.subject = Clause.subject;
		S.object = Clause.object;
		S.request = Clause.request
	}
]

[
	// John drives / She died

	rule:
		Clause => NP VP,
	semantics: {
		Clause.sem = NP.sem and VP.sem and subject(Clause.event, Clause.subject) and object(Clause.event, S.object) and mood(Clause.event, Declarative);
    	Clause.event = VP.event;
    	Clause.subject = NP.entity;
    	Clause.object = VP.object
	}
]

[
	// Drive! / Book that flight / She died

	rule:
		Clause => VP,
	semantics: {
		Clause.sem = VP.sem and object(Clause.event, Clause.object) and mood(Clause.event, Imperative);
		Clause.event = VP.event;
		Clause.object = VP.object
	}
]

[
	// Who Is John? / How many children had Lord Byron? / Who were Lord Byron's parents?

	rule:
		Clause => WhADVP VP NP,
	semantics: {
		Clause.sem = WhADVP.sem and VP.sem and NP.sem and subject(Clause.event, Clause.subject) and object(Clause.event, Clause.object) and request(Clause.request) and mood(Clause.event, Interrogative);
        Clause.event = VP.event;
        Clause.subject = NP.entity;
        Clause.subject = WhADVP.subject;
        Clause.object = WhADVP.entity;
        Clause.request = WhADVP.request;
        Clause.event = WhADVP.event
	}
]

[
	// Where was John born?

	rule:
        Clause => WhADVP auxBe NP VP,
    semantics: {
		Clause.sem = WhADVP.sem and auxBe.sem and NP.sem and VP.sem and subject(Clause.event, Clause.subject) and request(Clause.request) and mood(Clause.event, Interrogative);
		Clause.event = WhADVP.event;
		Clause.event = VP.event;
		Clause.subject = NP.entity;
		Clause.request = WhADVP.request;
		Clause.event = auxBe.event
    }
]

[
	// Was John driving?

	rule:
        Clause => aux NP VP,
    semantics: {
		Clause.sem = NP.sem and VP.sem and subject(Clause.event, Clause.subject) and mood(Clause.event, Interrogative);
		Clause.event = VP.event;
		Clause.subject = NP.entity
    }
]

[
	// Was the car driven by John?

	rule:
        Clause => aux NP1 VP passivisationPreposition NP2,
    semantics: {
        Clause.sem = NP1.sem and NP2.sem and VP.sem and subject(Clause.event, Clause.subject) and object(Clause.event, Clause.object) and mood(Clause.event, Interrogative) and voice(Clause.event, Passive);
        Clause.event = VP.event;
        Clause.subject = NP2.entity;
        Clause.object = NP1.entity
    }
]

[
	// Was John a fool?
	// Was Ada Lovelace the daughter of Lord Byron?

	rule:
        Clause => auxBe NP1 NP2,
    semantics: {
       Clause.sem = auxBe.sem and NP1.sem and NP2.sem and subject(Clause.event, Clause.subject) and complement(Clause.event, Clause.complement) and mood(Clause.event, Interrogative);
       Clause.complement = NP2.entity;
       Clause.subject = NP1.entity
    }

]

[
	// How old was Mary Shelley?

	rule:
        Clause => WhADVP auxBe NP,
    semantics: {
        Clause.sem = WhADVP.sem and auxBe.sem and NP.sem and subject(Clause.event, Clause.subject) and modifier(Clause.event, Clause.complement) and request(Clause.request) and mood(Clause.event, Interrogative);
        Clause.complement = WhADVP.entity;
        Clause.event = auxBe.event;
        Clause.subject = NP.entity;
        Clause.request = WhADVP.request
    }

]

[
	// How old was Mary Shelley when she died?

	rule:
		Clause1 => Clause2 SBar,
	semantics: {
		Clause1.sem = Clause2.sem and SBar.sem;
		Clause1.event = Clause2.event;
		Clause1.subject = Clause2.subject;
		Clause1.object = Clause2.object;
		Clause1.event = SBar.superEvent;
		Clause1.request = Clause2.request
	}
]

[
	// S-Bar, see 'The structure of modern english' - Brinton (2000) - p. 230

	rule:
		SBar => whAdverb Clause,
	semantics: {
		SBar.sem = whAdverb.sem and Clause.sem;
		SBar.superEvent = whAdverb.event;
		SBar.subEvent = whAdverb.adjunct;
		SBar.subEvent = Clause.event
	}
]

// Verb Phrase

[
	// drives

	rule:
		VP => verb,
	semantics: {
		VP.sem = verb.sem;
		VP.event = verb.event
	}
]

[
	// book that flight! / sees the book
	// Name Lord Byron's children.

	rule:
		VP => verb NP,
	semantics: {
		VP.sem = verb.sem and NP.sem and object(VP.event, VP.object);
		VP.event = verb.event;
		VP.object = NP.entity
	}
]

[
	// gives Mary flowers

	rule:
		VP => verb NP1 NP2,
	semantics: {
		S.sem = verb.sem and NP1.sem and NP2.sem and subject(S.event, S.subject) and object(S.event, S.object);
		S.event = verb.event;
		S.subject = NP1.entity;
		S.object = NP2.entity
	}
]

[
	// ben 43 jaar oud

	rule:
		VP => copula AdjP,
	semantics: {
		VP.sem = AdjP.sem;
		VP.event = AdjP.event;
		VP.object = AdjP.entity
	}
]

[
	// driven by John

	rule:
		VP => verb PP,
	semantics: {
		VP.sem = verb.sem and PP.sem;
		VP.event = verb.event;
		VP.event = PP.superEntity
	}
]

// Wh-adverb phrase


[
	// who

	rule:
        WhADVP => whAdverb,
    semantics: {
        WhADVP.sem = whAdverb.sem;
        WhADVP.request = whAdverb.adjunct;
        WhADVP.subject = whAdverb.subject
    }
]

[
	// where, when

	rule:
        WhADVP => whAdverb,
    semantics: {
        WhADVP.sem = whAdverb.sem;
        WhADVP.request = whAdverb.adjunct;
        WhADVP.event = whAdverb.event
    }
]

[
	// which car, how many children

	rule:
        WhADVP => whwordNP NP,
    semantics: {
		WhADVP.sem = whwordNP.sem and NP.sem;
		WhADVP.entity = whwordNP.entity;
		WhADVP.entity = NP.entity;
		WhADVP.request = whwordNP.adjunct
    }
]

[
	// how old

	rule:
        WhADVP => whwordNP AdjP,
    semantics: {
		WhADVP.sem = whwordNP.sem and AdjP.sem;
		WhADVP.entity = whwordNP.entity;
		WhADVP.entity = AdjP.entity;
		WhADVP.request = whwordNP.adjunct
    }
]

// Noun Phrase

[
	// John

	rule:
        NP => PN,
    semantics: {
		NP.sem = PN.sem;
        NP.entity = PN.entity
    }
]

[
	// he

	rule:
        NP => pronoun,
    semantics: {
		NP.sem = pronoun.sem;
        NP.entity = pronoun.entity
    }
]

[
	// the car

	rule:
        NP => DP NBar,
    semantics: {
		NP.sem = DP.sem and NBar.sem;
        NP.entity = NBar.entity;
        NP.entity = DP.entity
    }
]

[
	// (large) car (in the lot)

	rule:
        NP => NBar,
    semantics: {
		NP.sem = NBar.sem;
        NP.entity = NBar.entity
    }
]

// N-Bar

[
	// car

	rule:
        NBar => noun,
    semantics: {
		NBar.sem = noun.sem;
        NBar.entity = noun.entity
    }
]

[
	// blue car

	rule:
        NBar1 => AdjP NBar2,
    semantics: {
		NBar1.sem = AdjP.sem and NBar2.sem;
        NBar1.entity = NBar2.entity
    }
]

[
	// car in the lot
	// the author of Paradise Lost

	rule:
        NBar1 => NBar2 PP,
    semantics: {
		NBar1.sem = NBar2.sem and PP.sem;
        NBar1.entity = NBar2.entity;
        NBar1.entity = PP.superEntity
    }
]

// Proper Name

[
	// John, "Lord Byron (the first)"

	rule:
        PN => propernoun,
    semantics: {
		PN.sem = name(PN.entity, propernoun.text);
        PN.entity = propernoun.entity
    }
]

[
	// Lord Byron, Ada Lovelace

	rule:
        PN => propernoun1 propernoun2,
    semantics: {
		PN.sem = name(PN.entity, propernoun1.text + " " + propernoun2.text);
        PN.entity = propernoun1.entity;
        PN.entity = propernoun2.entity
    }
]

[
	// Jan de Wit

	rule:
        PN => propernoun1 propernoun2 propernoun3,
    semantics: {
		PN.sem = name(PN.entity, propernoun1.text + " " + propernoun2.text + " " + propernoun3.text);
        PN.entity = propernoun1.entity;
        PN.entity = propernoun2.entity;
        PN.entity = propernoun3.entity
    }
]

[
	// Jan de Wit

	rule:
        PN => propernoun1 insertion propernoun2,
    semantics: {
        PN.sem = name(PN.entity, propernoun1.text + " " + insertion.text + " " + propernoun2.text);
        PN.entity = propernoun1.entity;
        PN.entity = propernoun2.entity
    }
]

// Prepositional Phrase

[
	rule:
		PP => preposition NP,
	semantics: {
		PP.sem = preposition.sem and NP.sem;
		PP.superEntity = preposition.superEntity;
		PP.subEntity = preposition.subEntity;
		PP.subEntity = NP.entity
	}
]

// Adjectival Phrase

[
	// red

	rule:
		AdjP => adjective,
	semantics: {
		AdjP.sem = adjective.sem
	}
]

[
	// fiercely barking

	rule:
		AdjP => AdvP adjective,
	semantics: {
		AdjP.sem = AdvP.sem and adjective.sem
	}
]

[
	// bright red

	rule:
		AdjP => degreeAdverb adjective,
	semantics: {
		AdjP.sem = degreeAdverb.sem and adjective.sem
	}
]

[
	// (i am) 43 years old

	rule:
		AdjP => NP adjective,
	semantics: {
		AdjP.sem = NP.sem and adjective.sem
	}
]

// Adverbial Phrase

[
	// quickly

	rule:
        AdvP => adverb,
    semantics: {
        AdvP.sem = adverb.sem
    }
]

[
	// very quickly

	rule:
        AdvP => degreeAdverb adverb,
    semantics: {
        AdvP.sem = degreeAdverb.sem and adverb.sem
    }
]

// Determiner Phrase

[
	// the
	rule:
        DP => determiner,
    semantics: {
        DP.sem = determiner.sem
    }
]

[
	// Byron's

	rule:
        DP => NP possessiveMarker,
    semantics: {
        DP.sem = NP.sem and possessiveMarker.sem;
        DP.subEntity = possessiveMarker.subEntity;
        DP.entity = possessiveMarker.superEntity;
        DP.subEntity = NP.entity
    }
]

[
	// 43 (years old)
	// 2 (blue cars)

	rule:
		DP => numeral,
	semantics: {
		DP.sem = numeral.sem
	}
]

